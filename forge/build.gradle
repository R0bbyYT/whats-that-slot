plugins {
  id 'java'
  id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
  id 'org.spongepowered.mixin' version '0.7+'
  id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

base {
  archivesName = "$mod_name-forge"
}

minecraft {
  mappings channel: "parchment", version: "$parchment_version-$parchment_minecraft_version"

  copyIdeResources = true

  runs {
    configureEach {
      workingDirectory project.file("run")
      ideaModule "${rootProject.name}.${project.name}.main"
      arg "-mixin.config=${mod_id}.mixins.json"

      mods {
        whats_that_slot {
          source sourceSets.main
          source project(":common").sourceSets.main
        }
      }
    }

    client {
      taskName "client"
    }

    server {
      taskName "server"
      args '--nogui'
    }
  }
}

repositories {
  maven { url "https://dvs1.progwml6.com/files/maven/" }
  maven { url "https://modmaven.dev" }
}

dependencies {
  compileOnly project(":common")

  minecraft "net.minecraftforge:forge:$minecraft_version-$forge_version"

  compileOnly fg.deobf("mezz.jei:jei-$jei_minecraft_version-common-api:$jei_version")
  runtimeOnly fg.deobf("mezz.jei:jei-$jei_minecraft_version-forge:$jei_version")

  if (System.getProperty("idea.sync.active") != "true") {
    annotationProcessor "org.spongepowered:mixin:0.8.5:processor"
  }
}

mixin {
  add project(":common").sourceSets.main, "${mod_id}.refmap.json"
  add sourceSets.main, "${mod_id}.refmap.json"
}

def resourceTargets = ['META-INF/mods.toml']
def replaceProperties = [
        mod_id: mod_id,
        mod_version: mod_version,
        minecraft_version: minecraft_version,
]

tasks.withType(JavaCompile).configureEach {
  it.source(project(":common").sourceSets.main.allSource)
}

tasks.named('processResources', ProcessResources).configure {
  from project(":common").sourceSets.main.resources

  inputs.properties replaceProperties
  replaceProperties.put 'project', project

  filesMatching(resourceTargets) {
    expand replaceProperties
  }
}

tasks.named('jar', Jar).configure {
  finalizedBy 'reobfJar'
}

sourceSets.each {
  def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
  it.output.resourcesDir = dir
  it.java.destinationDirectory = dir
}
