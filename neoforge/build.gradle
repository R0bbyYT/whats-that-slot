plugins {
  id 'idea'
  id 'java-library'
  id 'net.neoforged.gradle.userdev' version '7.0.97'
}

base {
  archivesName = "$mod_name-neoforge"
}

runs {
  configureEach {
    modSource project.sourceSets.main
  }
  client {
  }
  server {
    programArgument '--nogui'
  }
}

repositories {
  maven { url "https://dvs1.progwml6.com/files/maven/" }
  maven { url "https://modmaven.dev" }
}

dependencies {
  compileOnly project(":common")

  implementation "net.neoforged:neoforge:$neoforge_version"

  compileOnly "mezz.jei:jei-$jei_minecraft_version-common-api:$jei_version"
  runtimeOnly "mezz.jei:jei-$jei_minecraft_version-neoforge:$jei_version"
}

def resourceTargets = ['META-INF/mods.toml']
def replaceProperties = [
        mod_id: mod_id,
        mod_version: mod_version,
        minecraft_version: minecraft_version,
]

// NeoGradle compiles the game, but we don't want to add our common code to the game's code
Spec<Task> notNeoTask = { Task it -> !it.name.startsWith("neo") } as Spec<Task>

tasks.withType(JavaCompile).matching(notNeoTask).configureEach {
  source project(':common').sourceSets.main.allSource
}

tasks.withType(ProcessResources).matching(notNeoTask).configureEach {
  from project(':common').sourceSets.main.resources
}

tasks.named('processResources', ProcessResources).configure {
  from project(":common").sourceSets.main.resources

  inputs.properties replaceProperties
  replaceProperties.put 'project', project

  filesMatching(resourceTargets) {
    expand replaceProperties
  }
}
